function isOlderThanXHours (date, hours) {
  // Get the current date and time
  const now = new Date()

  // Calculate the time difference in milliseconds
  const timeDiff = now - new Date(date)

  // Convert the time difference to hours
  const timeDiffInHours = timeDiff / (1000 * 60 * 60)

  // Check if the time difference is greater than the specified number of hours
  return timeDiffInHours > hours
}

export default async function submitReview ({
  owner, repo, prnum, watermark, debounceTime,
  explainPatch = async () => 'no explanation provided<!-- Generated by STUB -->',
  githubToken = null,
  header = '',
  github = null,
  debug = false
}) {
  if (!github && githubToken) {
    const { Octokit } = await import('@octokit/core')

    github = new Octokit({ auth: githubToken })
  }

  if (debug) { console.log(`submitReview ${owner} ${repo} ${prnum}`) }

  if (!github && !githubToken) {
    throw new Error('You must provide a githubToken to use this function')
  }

  // check for existing messages with the watermark
  const query = `query($owner:String!, $name:String!, $prnumber:Int!) {
      repository(owner:$owner, name:$name) {
        pullRequest(number:$prnumber) {
          comments(last: 100) {
            nodes {
              id
              author { login }
              body
              updatedAt
            }
          }
        }
      }
  }`
  const variables = {
    owner,
    name: repo,
    prnumber: prnum
  }
  const messages = (await github.graphql(query, variables)).repository.pullRequest.comments.nodes

  // debounce if there are messages with watermark and the debounce time is not expired yet
  if (messages.some(msg => msg.body.includes(watermark) && !isOlderThanXHours(msg.updatedAt, debounceTime))) {
    throw new Error('debounce')
  }

  // delete existing messages with the watermark
  const deleteQuery = `mutation DeleteIssueComment($id:ID!) {
      deleteIssueComment(input:{id:$id}) {
        clientMutationId
      }
    }`

  if (debug) console.log(`Deleting ${messages.length} message(s)`)
  for (let i = 0; i < messages.length; i++) {
    if (messages[i].body.includes(watermark)) {
      await github.graphql(deleteQuery, { id: messages[i].id })
    }
  }

  // explain the patch, use an external callback
  const patchExplained = await explainPatch()

  // post the explanation as a comment
  if (patchExplained) {
    await github.rest.issues.createComment({
      owner,
      repo,
      issue_number: prnum,
      body: watermark + '\n\n' + header + '\n\n' + patchExplained
    })
  }
}
