name: 'puLL-Merge'
description: 'puLL-Merge is a github-action to add LLM capabilities to pull-requests in github automatically'
inputs:
  github_token:
    description: |
      Secret token to push review comments, and
      interact with the repository systematically
    required: true
  openai_api_key:
    description: |
      API key to interact with the OpenAI endpoint
  debounce_time:
    description: |
      Debounce Time in hours
  amplification:
    description: |
      Amplification factor for the generated text
  filterdiff_args:
    description: |
      Arguments to pass to filterdiff
  openai_models:
    description: |
      selection of models to use for the openai endpoint
  run_if_private:
    description: |
      run the action even if the repository is private
  debug:
    description: enables debug output for this action
    required: false
  repo:
    description: |
      force the repository to run the action on
    required: false
  owner:
    description: |
      force the owner to run the action on
    required: false
  prnum:
    description: |
      force the pull request number to run the action on
    required: false
  max_tokens:
    description: |
      maximum number of tokens to generate
    required: false
# outputs:
runs:
  using: 'composite'
  steps:
    - uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
      with:
        node-version: '20.x'
    - name: Install patchutils for filterdiff
      uses: awalsh128/cache-apt-pkgs-action@a6c3917cc929dd0345bfb2d3feaf9101823370ad # v1.4.2
      with:
        packages: patchutils
        version: 1.0
    - id: npm
      run: cd ${{ github.action_path }}; npm ci
      shell: bash
    - id: llm-and-post-message
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      if: ${{ !contains(github.event.pull_request.labels.*.name, 'CI/skip-llm') && !contains(github.event.pull_request.labels.*.name, 'CI/skip') && github.event.pull_request.draft == false }}
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        DEBUG: ${{ (inputs.debug == 'true' || runner.debug) && 'true' || 'false'}}
      with:
          script: |
            const { default: explainPatch } = await import('${{ github.action_path }}/src/openaiExplainPatch.js');
            const { default: filterdiff } = await import('${{ github.action_path }}/src/filterdiff.js');
            const { default: getPatch } = await import('${{ github.action_path }}/src/getPatch.js');
            const { default: getRenovatePatch } = await import('${{ github.action_path }}/src/getRenovatePatch.js');
            const { default: getDependabotPatch } = await import('${{ github.action_path }}/src/getDependabotPatch.js');
            const { default: getConfig } = await import('${{ github.action_path }}/src/getConfig.js');
            const { default: getProperties } = await import('${{ github.action_path }}/src/getProperties.js');
            
            const inputs = ${{ toJson(inputs) }};
            // delete if empty string in inputs value
            Object.keys(inputs).forEach(key => inputs[key] === '' && delete inputs[key]);
            
            var debug = process.env.DEBUG == 'true';
            if (debug) console.log("Initializing puLL-Merge");

            let config = await getConfig({owner: context.repo.owner, repo: context.repo.repo, path: '.github/pull-merge.json', debug, github});
            let properties = await getProperties({owner: context.repo.owner, repo: context.repo.repo, debug, github});

            let options = Object.assign({
              "debounce_time": "6",
              "amplification": "4",
              "filterdiff_args": "--exclude=**/package-lock.json --exclude=**/yarn.lock --exclude=**/*.js.map --exclude=**/*.svg --exclude=**/test/data/**/*",
              "openai_models": "gpt-3.5-turbo-0125",
              "owner": context.repo.owner,
              "repo": context.repo.repo,
              "prnum": context.issue.number,
              "max_tokens": "2048",
            }, config, properties, inputs);

            // convert to numbers some options
            options.debounce_time = parseFloat(options.debounce_time, 10);
            options.amplification = parseFloat(options.amplification, 10);
            options.prnum = parseFloat(options.prnum, 10);
            options.max_tokens = parseFloat(options.max_tokens, 10);
            
            debug = options.debug ? (options.debug == 'true') : debug;

            if (debug) {
              console.log(`Using options: ${JSON.stringify(options)}`);
              console.log(`Using config: ${JSON.stringify(config)}`);
              console.log(`Using properties: ${JSON.stringify(properties)}`);
              console.log(`Using inputs: ${JSON.stringify(inputs)}`);
            }            

            function isOlderThanXHours(date, hours) {
              // Get the current date and time
              var now = new Date();

              // Calculate the time difference in milliseconds
              var timeDiff = now - new Date(date);

              // Convert the time difference to hours
              var timeDiffInHours = timeDiff / (1000 * 60 * 60);

              // Check if the time difference is greater than the specified number of hours
              return timeDiffInHours > hours;
            }

            let patch = null;
            let logError = null;
            let patchExplained = null;

            try {
              // if the PR is a renovate PR, we need to get the patch from the renovate API
              // check if the PR actor is renovate[bot]

              if ((context.payload.pull_request && context.payload.pull_request.user.login === 'renovate[bot]') || context.actor === 'renovate[bot]') {
                patch = await getRenovatePatch({
                  owner: options.owner,
                  repo: options.repo,
                  prnum: options.prnum,
                  debug: debug,
                  github: github});
              } else if ((context.payload.pull_request && context.payload.pull_request.user.login === 'dependabot[bot]') || context.actor === 'dependabot[bot]') {
                patch = await getDependabotPatch({
                  owner: options.owner,
                  repo: options.repo,
                  prnum: options.prnum,
                  debug: debug,
                  github: github});
              } else {
                patch = await getPatch({
                  owner: options.owner,
                  repo: options.repo,
                  prnum: options.prnum,
                  debug: debug,
                  runIfPrivate: options.run_if_private,
                  github: github});
              }

              const query = `query($owner:String!, $name:String!, $prnumber:Int!) {
                repository(owner:$owner, name:$name) {
                  pullRequest(number:$prnumber) {
                    comments(last: 100) {
                      nodes {
                        id
                        author { login }
                        body
                        updatedAt
                      }
                    }
                  }
                }
              }`;
              const variables = {
                owner: options.owner,
                name: options.repo,
                prnumber: options.prnum,
              }
              const messages = (await github.graphql(query, variables)).repository.pullRequest.comments.nodes;

              if (messages.some(msg => msg.body.includes(patch.watermark) && !isOlderThanXHours(msg.updatedAt, options.debounce_time))) {
                throw new Error("debounce");
              }

              const deleteQuery = `mutation DeleteIssueComment($id:ID!) {
                deleteIssueComment(input:{id:$id}) {
                  clientMutationId
                }
              }`

              if (debug) console.log(`Deleting ${messages.length} message(s)`);
              for (var i = 0; i < messages.length; i++) {
                if (messages[i].body.includes(patch.watermark)) {
                  await github.graphql(deleteQuery, {id: messages[i].id});
                }
              }

              const filteredPatch = await filterdiff({
                content: patch.body,
                args: options.filterdiff_args,
                debug: debug});

              if (debug) console.log(`\n\nOriginal patch:\n${patch.body}\n\nFiltered patch:\n${filteredPatch}\n\n`);

              patchExplained = patch.watermark+"\n\n"+(await explainPatch({
                openaiKey: options.openai_api_key,
                patchBody: filteredPatch,
                github: github,
                owner: patch.owner,
                repo: patch.repo,
                debug: debug,
                models: options.openai_models.split(" "),
                amplification: options.amplification,
                max_tokens: options.max_tokens}));

              await github.rest.issues.addLabels({
                owner: options.owner,
                repo: options.repo,
                issue_number: options.prnum,
                labels: ["puLL-Merge"],
              });
            } catch (error) {
              console.log(error);
              logError = error;
              if (debug) throw error;
            }

            try {
              if (options.openai_api_key !== null && patchExplained === null && patch.type !== "simple" && logError.message !== "debounce") {
                patchExplained = patch.watermark+"\n\n"+`logError ${logError.message}`;
              }

              if (patchExplained) await github.rest.issues.createComment({
                owner: options.owner,
                repo: options.repo,
                issue_number: options.prnum,
                body: patchExplained
              });
            } catch (error) {
              console.log(error);
              if (debug) throw error;
            }
